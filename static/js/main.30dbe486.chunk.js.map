{"version":3,"sources":["caesar13.js","App.js","serviceWorker.js","index.js"],"names":["caesar13","sentence","codedSentence","notEncryptableCharDetected","charIndex","length","charCode","charCodeAt","String","fromCharCode","App","useState","encryptedMessage","setEncryptedMessage","haveNotEncryptedChars","setHaveNotEncryptedChars","copyButtonValue","setCopyButtonValue","className","src","alt","height","style","marginBottom","display","htmlFor","marginTop","type","id","name","onChange","e","target","value","width","color","disabled","onClick","navigator","clipboard","writeText","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAAaA,G,MAAW,SAACC,GAQvB,IAPA,IAIIC,EAAgB,GAChBC,GAA6B,EAExBC,EAAY,EAAGA,EAAYH,EAASI,OAAQD,IAAa,CAChE,IAAME,EAAWL,EAASM,WAAWH,GAGjCE,GAXmB,IAWaA,GAVb,IAYnBJ,GADEI,EAAW,GAXM,IAYFE,OAAOC,aAAaH,EAAW,IAC5BE,OAAOC,aAAaH,EAAW,IAG9CA,GAfY,IAekBA,GAdlB,GAgBjBJ,GADEI,EAAW,GAfI,GAgBAE,OAAOC,aAAaH,EAAW,IAC5BE,OAAOC,aAAaH,EAAW,KAIrDJ,GAAiBD,EAASG,GAC1BD,GAA6B,GAIjC,MAAO,CAACD,EAAeC,KC0DVO,MApFf,WAAgB,IAAD,EACmCC,mBAAS,IAD5C,mBACNC,EADM,KACYC,EADZ,OAE6CF,oBAAS,GAFtD,mBAENG,EAFM,KAEiBC,EAFjB,OAGiCJ,mBAC5C,0BAJW,mBAGNK,EAHM,KAGWC,EAHX,KAoBb,OACE,yBAAKC,UAAU,OACb,qCACA,yBACEC,IAAI,2EACJC,IAAI,mBACJC,OAAO,MACPC,MAAO,CAAEC,aAAc,OAAQC,QAAS,YAE1C,2BACEC,QAAQ,WACRH,MAAO,CACLI,UAAW,OACXF,QAAS,UAJb,8BASA,2BACEG,KAAK,OACLC,GAAG,WACHC,KAAK,WACLC,SAnC4B,SAACC,GACjClB,EAAoBb,EAAS+B,EAAEC,OAAOC,OAAO,IAC7ClB,EAAyBf,EAAS+B,EAAEC,OAAOC,OAAO,KAkC9CX,MAAO,CAAEY,MAAO,UAEjBpB,EACC,uBAAGQ,MAAO,CAAEa,MAAO,QAAnB,iEAEE,6BAFF,4CAKA,6BAEF,2BACEV,QAAQ,gBACRH,MAAO,CACLI,UAAW,OACXF,QAAS,UAJb,uBASA,2BACEG,KAAK,OACLC,GAAG,gBACHC,KAAK,gBACLO,UAAU,EACVH,MAAOrB,EACPU,MAAO,CAAEY,MAAO,UAElB,6BACA,4BACEP,KAAK,SACLU,QA7D4B,WAChCC,UAAUC,UAAUC,UAAU5B,GAC9BK,EAAmB,cACnBwB,YAAW,WACTxB,EAAmB,4BAClB,MAyDCK,MAAO,CACLI,UAAW,QAGZV,KCtEW0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBb,WACrBA,UAAUc,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.30dbe486.chunk.js","sourcesContent":["export const caesar13 = (sentence) => {\r\n  const minSmallCharCode = 97; //a\r\n  const maxSmallCharCode = 122; //z\r\n  const minBigCharCode = 65; //A\r\n  const maxBigCharCode = 90; //Z\r\n  let codedSentence = \"\";\r\n  let notEncryptableCharDetected = false;\r\n\r\n  for (let charIndex = 0; charIndex < sentence.length; charIndex++) {\r\n    const charCode = sentence.charCodeAt(charIndex);\r\n\r\n    //Obsługa małych liter\r\n    if (charCode >= minSmallCharCode && charCode <= maxSmallCharCode) {\r\n      if (charCode + 13 > maxSmallCharCode)\r\n        codedSentence += String.fromCharCode(charCode - 13);\r\n      else codedSentence += String.fromCharCode(charCode + 13);\r\n    }\r\n    //Obsługa wielkich liter\r\n    else if (charCode >= minBigCharCode && charCode <= maxBigCharCode) {\r\n      if (charCode + 13 > maxBigCharCode)\r\n        codedSentence += String.fromCharCode(charCode - 13);\r\n      else codedSentence += String.fromCharCode(charCode + 13);\r\n    } \r\n    //Jeżeli inny znak to brak modyfikacji\r\n    else {\r\n      codedSentence += sentence[charIndex];\r\n      notEncryptableCharDetected = true\r\n    }\r\n  }\r\n\r\n  return [codedSentence, notEncryptableCharDetected];\r\n};\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { caesar13 } from \"./caesar13\";\n\nfunction App() {\n  const [encryptedMessage, setEncryptedMessage] = useState(\"\");\n  const [haveNotEncryptedChars, setHaveNotEncryptedChars] = useState(false);\n  const [copyButtonValue, setCopyButtonValue] = useState(\n    \"Copy text to clipboard\"\n  );\n\n  const handleSentenceInputChange = (e) => {\n    setEncryptedMessage(caesar13(e.target.value)[0]);\n    setHaveNotEncryptedChars(caesar13(e.target.value)[1]);\n  };\n\n  const handleCopyTextToClipboard = () => {\n    navigator.clipboard.writeText(encryptedMessage);\n    setCopyButtonValue(\"Copied! :)\");\n    setTimeout(() => {\n      setCopyButtonValue(\"Copy text to clipboard\");\n    }, 2000);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>ROT13</h1>\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/9/9f/Enigma_rotor_set.png\"\n        alt=\"Enigma rotor set\"\n        height=\"200\"\n        style={{ marginBottom: \"20px\", display: \"inline\" }}\n      ></img>\n      <label\n        htmlFor=\"sentence\"\n        style={{\n          marginTop: \"20px\",\n          display: \"block\",\n        }}\n      >\n        Enter sentence to encrypt:\n      </label>\n      <input\n        type=\"text\"\n        id=\"sentence\"\n        name=\"sentence\"\n        onChange={handleSentenceInputChange}\n        style={{ width: \"20em\" }}\n      />\n      {haveNotEncryptedChars ? (\n        <p style={{ color: \"red\" }}>\n          The encryptor only encrypts the letters of the Latin alphabet.\n          <br /> Other characters will not be encrypted!\n        </p>\n      ) : (\n        <br />\n      )}\n      <label\n        htmlFor=\"codedSentence\"\n        style={{\n          marginTop: \"20px\",\n          display: \"block\",\n        }}\n      >\n        Encrypted sentence:\n      </label>\n      <input\n        type=\"text\"\n        id=\"codedSentence\"\n        name=\"codedSentence\"\n        disabled={true}\n        value={encryptedMessage}\n        style={{ width: \"20em\" }}\n      />\n      <br />\n      <button\n        type=\"button\"\n        onClick={handleCopyTextToClipboard}\n        style={{\n          marginTop: \"5px\",\n        }}\n      >\n        {copyButtonValue}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}